!!!!! copy and paste these commands into the console one at a

node
const { generateRandoNumboArr, bubbleSort, clearArr, selectionSort, recordSortingTimes } = require('./bruteForceUtils');
global.arr = []
global.bubbleTimer = []
global.selectionTimer = []
global.counter = []
global.size = [10, 100, 1000, 10000, 100000]
generateRandoNumboArr(10, global.arr)
global.arr
bubbleSort(global.arr, global.counter)
global.arr
clearArr(global.arr)
clearArr(global.counter)
generateRandoNumboArr(10, global.arr)
global.arr
selectionSort(global.arr, global.counter)
global.arr
clearArr(global.arr)
clearArr(global.counter)
recordSortingTimes(global.bubbleTimer, global.selectionTimer)




    < div >
    <div>
        <h1>Asymptotic Runtimes</h1>
        <ol>
            <li><b>Bubble Sort:</b> Because there are two loops,
                one nested inside the other the time complexity in the average and worst case scenario the
                Asymptotic Runtime is O(n^2) and the best case it would be O(n) if the array is already sorted.</li>
            <li><b>Selected Sort:</b> Like the bubble sort, the selected sort also has nested for loops
                so it also has a time complexity of 0(n^2). The difference is that the Selected Sort will
                perform it's full operation, even if the list is sorted. </li>
        </ol>
    </div >
    <div>
        <ol>
            <h1>Explanation of CLIP</h1>
            <li>CLIP (Contrastive Language-Image Pre-training) is a neural network model developed by
                OpenAI that learns visual concepts from natural language supervision. It is trained on pairs of
                images and text descriptions to learn visual-semantic relationships, allowing it to perform
                various visual recognition tasks without specific training for each task.
            </li><br />
            <h1>Key Research Finding</h1>
            <li>
                a = Ω(2^n) → "model performance scales linearly as the concept frequency in pretraining data grows exponentially"
            </li>
        </ol>
    </div >
</div >